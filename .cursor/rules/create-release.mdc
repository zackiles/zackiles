---
description: Releasing and publishing new versions of Javascript packages
globs: 
alwaysApply: false
category: release
tags: version management,release workflow,package publishing,deployment process,change tracking,distribution management,release automation,version control
attachmentMethod: task
---
## **Task**  
You will analyze the codebase and plan how to release or publish a new version of this package or module, and then execute that plan. To do so, you will follow all of the steps bellow.

---

## **Steps**

### Analyze Codebase
1) Run `git` commands to understand which branch is checked out, whether the main branch is named `main` or `master`, if the working directory is clean or has uncommitted changes, how far ahead or behind we are from `main`, and what the local git config/custom git options are:
   ```
   # EXACT COMMAND: Run this exact command to check branch, status and recent commits
   run_terminal_cmd(
     command: "git branch --show-current && git status && git log --oneline -n 5 | cat",
     is_background: false,
     explanation: "Checking current branch, status, and recent commits"
   )
   ```
   ```
   # EXACT COMMAND: Run this exact command to check git configuration
   run_terminal_cmd(
     command: "git config --list | grep -E '^(user|core|remote|branch)' | cat",
     is_background: false,
     explanation: "Checking git configuration"
   )
   ```

2) If GitHub info is accessible (via CLI or other tools), check whether there is an open pull request for this branch and how local commits diverge from the remote repository:
   ```
   # EXACT COMMAND: Run this exact command to check commits relative to upstream
   run_terminal_cmd(
     command: "git fetch && git rev-list --count --left-right @{upstream}...HEAD | cat",
     is_background: false,
     explanation: "Checking commits ahead/behind remote"
   )
   ```

3) Look in `.github/workflows` to see which release steps occur locally vs remotely (e.g., GitHub Actions):
   ```
   # EXACT COMMAND: Run this exact command to list workflow files
   list_dir(
     relative_workspace_path: ".github/workflows",
     explanation: "Checking for CI/CD workflow configurations"
   )
   ```

4) Grep for package files to identify package name, version, publish registries, and any release tools:
   ```
   # EXACT COMMAND: Run this exact command to find version information in JSON files
   grep_search(
     query: "version",
     include_pattern: "*.json",
     explanation: "Finding version information in package files"
   )
   ```
   ```
   # EXACT COMMAND: Run this exact command to extract package metadata
   run_terminal_cmd(
     command: "find . -name 'package.json' -o -name 'deno.json' -o -name 'jsr.json' | xargs cat | grep -E '\"(name|version|publish|registry)\"' | cat",
     is_background: false,
     explanation: "Extracting package information"
   )
   ```

5) Inspect `.git/` hooks to find any configured release processes or commit checks:
   ```
   # EXACT COMMAND: Run this exact command to check git hooks
   run_terminal_cmd(
     command: "ls -la .git/hooks/ | cat",
     is_background: false,
     explanation: "Checking git hooks"
   )
   ```

6) Grep for markdown documents that may contain instructions for releasing/publishing:
   ```
   # EXACT COMMAND: Run this exact command to find release-related documentation
   grep_search(
     query: "release|publishing|publish|version",
     include_pattern: "*.md",
     explanation: "Finding release instructions in documentation"
   )
   ```

7) Compare the local version to the latest published version on any registry this package uses:
   ```
   # EXAMPLE COMMAND: Adapt this command for npm packages
   run_terminal_cmd(
     command: "npm view $(node -e \"console.log(require('./package.json').name)\" 2>/dev/null) version 2>/dev/null || echo 'Not on npm'",
     is_background: false,
     explanation: "Checking latest published version on npm"
   )
   ```
   ```
   # EXAMPLE COMMAND: Adapt this command for JSR packages
   run_terminal_cmd(
     command: "deno run -A https://deno.land/x/jsr/cli.ts info $(cat deno.json | jq -r '.name') 2>/dev/null || echo 'Not on JSR'",
     is_background: false,
     explanation: "Checking latest published version on JSR"
   )
   ```

8) Check the latest GitHub tag/release to see if it's ahead or behind the local version:
   ```
   # EXACT COMMAND: Run this exact command to check the latest git tag
   run_terminal_cmd(
     command: "git describe --tags --abbrev=0 || echo 'No tags found'",
     is_background: false,
     explanation: "Checking latest git tag"
   )
   ```

### Plan the Steps Needed to Release
1) Determine if you're on `main` or a feature branch; if on a feature branch, confirm whether it already exists on the remote:
   ```
   # EXACT COMMAND: Run this exact command to check current branch
   run_terminal_cmd(
     command: "git branch --show-current",
     is_background: false,
     explanation: "Checking current branch"
   )
   ```
   ```
   # EXAMPLE COMMAND: This command needs to be run after checking your current branch
   run_terminal_cmd(
     command: "git branch -r | grep $(git branch --show-current) || echo 'Branch not found on remote'",
     is_background: false,
     explanation: "Checking if branch exists on remote"
   )
   ```

2) Check for unstaged changes and stage them if necessary:
   ```
   # EXACT COMMAND: Run this exact command to check for unstaged changes
   run_terminal_cmd(
     command: "git status --porcelain",
     is_background: false,
     explanation: "Checking for unstaged changes"
   )
   ```
   ```
   # EXAMPLE COMMAND: Run this command if you want to stage all changes
   run_terminal_cmd(
     command: "git add .",
     is_background: false,
     explanation: "Staging all changes"
   )
   ```

3) If behind `main`, decide whether to fetch and rebase or merge:
   ```
   # EXAMPLE COMMAND: This command assumes your main branch is named 'main', adapt if different
   run_terminal_cmd(
     command: "git fetch && git rev-list --count --left-right main...HEAD | cat",
     is_background: false,
     explanation: "Checking commits behind main"
   )
   ```

4) Commit any uncommitted changes using a format consistent with the codebase's commit-message rules:
   ```
   # EXAMPLE COMMAND: Adapt this conventional commit message to your needs
   run_terminal_cmd(
     command: "git commit -m 'feat: prepare for release'",
     is_background: false,
     explanation: "Committing changes with conventional commit message"
   )
   ```

5) If a version bump is required, update the version in the appropriate file:
   ```
   # EXAMPLE COMMAND: Adapt this for your specific package file and version
   edit_file(
     target_file: "package.json",
     instructions: "Bumping version for release",
     code_edit: "// ... existing code ...\n  \"version\": \"1.2.3\",\n// ... existing code ..."
   )
   ```

6) On the main branch, you may need to push tags to trigger a release:
   ```
   # EXAMPLE COMMAND: Adapt this for your versioning approach
   run_terminal_cmd(
     command: "git tag v$(node -e \"console.log(require('./package.json').version)\")",
     is_background: false,
     explanation: "Creating a version tag"
   )
   ```
   ```
   # EXACT COMMAND: Run this exact command to push tags to remote
   run_terminal_cmd(
     command: "git push --tags",
     is_background: false,
     explanation: "Pushing tags to remote"
   )
   ```

7) Distinguish which tasks should happen locally vs which are automated by CI/CD:
   ```
   # EXAMPLE COMMAND: Adapt this to your specific workflow file
   read_file(
     target_file: ".github/workflows/release.yml",
     should_read_entire_file: true,
     explanation: "Reviewing release workflow"
   )
   ```

8) If conflicting info or uncertainty arises, ask the user for direction.

### Execute Steps
Carry out each required action or, if something is needed from the user, prompt them and resume once they respond. Finally, confirm the release info:
```
# EXAMPLE COMMAND: Adapt this to your specific package system
run_terminal_cmd(
  command: "echo 'Package release info:' && echo 'Version: '$(node -e \"console.log(require('./package.json').version 2>/dev/null)\" || cat deno.json | jq -r '.version') && echo 'Branch: '$(git branch --show-current) && echo 'Latest tag: '$(git describe --tags --abbrev=0 || echo 'No tags found')",
  is_background: false,
  explanation: "Displaying release information"
)
```

---

## **General Notes**
- Avoid destructive operations that could lose work (no forced resets or branch deletions).  
- Combine or chain commands where possible, minimizing unnecessary calls to tools.  
- Adhere to branch naming policies and commit message linting rules.  
- If the release process requires manual steps or is triggered by merging a pull request into `main`, clearly instruct the user to open a PR and merge it as needed.  
- If any instructions conflict, ask the user for clarification before proceeding.
